generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
}

model patients_signup {
  patient_id       Int    @id @default(autoincrement())
  patient_name     String
  patient_email    String @unique
  password         String
  email            String
  phone            String
  cnic             String
  address          String
  city             String
  gender           String
  time_slot        String
  appointment_date String
}

model PatientLogin {
  patient_id                 Int       @id @default(autoincrement())
  full_name                  String
  gender                     String
  dob                        DateTime
  email                      String    @unique
  phone                      String?
  cnic                       String?
  cnic_expiry                DateTime?
  address                    String?
  city                       String?
  province                   String?
  country                    String?
  medical_condition          String
  current_medications        String?
  allergies                  String?
  prescription_file          String?
  health_reports             String?
  financial_support          String
  monthly_income             String?
  occupation                 String?
  dependents                 Int?
  financial_proof            String?
  emergency_contact_name     String
  emergency_contact_relation String
  emergency_contact_phone    String
  preferred_ngo              String?
  preferred_city             String?
  password_hash              String
  created_at                 DateTime  @default(now())
  updated_at                 DateTime  @updatedAt
}

model Case {
  id              Int      @id @default(autoincrement())
  caseId          String   @unique
  patientName     String
  requestedAmount Float
  requestDate     DateTime
  status          String
  actions         String
}

model FundsTransfer {
  id        Int      @id @default(autoincrement())
  category  String
  month     String
  amount    Float
  createdAt DateTime @default(now())
}

model Status {
  id     Int    @id @default(autoincrement())
  status String
}

model Funds {
  id     Int    @id @default(autoincrement())
  month  String
  amount Float
}

model CaseStatus {
  id                 Int     @id @default(autoincrement())
  patientName        String
  age                Int
  gender             String
  diagnosis          String
  treatment          String
  status             String
  dosage             String?
  prescribedMedicine String?
}

model GigDetails {
  id          Int      @id @default(autoincrement())
  gigAmount   Int
  caseId      Int
  patientName String
  createdAt   DateTime @default(now())
}

model patients {
  patient_id          Int                  @id @default(autoincrement())
  patient_name        String
  email               String
  gender              String
  time_slot           String
  appointment_date    String
  pendingAppointments PendingAppointment[]
}

model PendingAppointment {
  id               Int      @id @default(autoincrement())
  patient_id       Int
  patient_name     String
  appointment_id   String   @unique
  appointment_date String
  status           String
  patient          patients @relation(fields: [patient_id], references: [patient_id])
}

model ratings {
  id             Int @id @default(autoincrement())
  satisfaction   Int
  diagnosis      Int
  staffBehaviour Int
  environment    Int
}

model Appointment {
  id     Int      @id @default(autoincrement())
  name   String
  date   DateTime
  status String   @default("Pending")
}

model ManageAccount {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  role     String @default("None")
}

model Admin {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  dob       DateTime
  email     String   @unique
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
}

model AidRequest {
  id            Int      @id @default(autoincrement())
  patientId     Int
  patientName   String
  medicineName  String
  requestStatus String
  ngoName       String?
  response      String?
  createdAt     DateTime @default(now())
}

model Medication {
  id         Int      @id @default(autoincrement())
  name       String
  stock      Int
  total      Int
  dosageTime String
  createdAt  DateTime @default(now())
}
model AssistanceRequest {
  id                Int      @id @default(autoincrement())
  fullName          String
  cnic              String
  contact           String
  medicalCondition  String
  assistanceType    String
  preferredNgo      String
  // You can store the file path or URL of the uploaded report
  // Or if you have a file-upload mechanism, store it accordingly
  medicalReport     String
  additionalMessage String? 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
