NGO/pharma/page.js:


"use client";

import { useState, useEffect } from "react";
import Header from "../../components/Header/page"; // Importing Header component
import { useSearchParams, useRouter } from "next/navigation";
import Link from "next/link";
import Image from "next/image";

const NgoPharmaResponses = () => {
  const params = useSearchParams();
  const id = params.get("id");
  const router = useRouter();
  const [Requests, setRequests] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Function to calculate remaining amount
  const calculateRemainingAmount = (request) => {
    const totalExpenditure = request.totalExpenditure || 0;
    const selfFinance = request.selfFinance || 0;
    const ngoAmount = request.ngoAmount || 0;
    return Math.max(totalExpenditure - selfFinance - ngoAmount, 0);
  };

  // Function to fetch data
  const fetchData = async () => {
    try {
      setLoading(true);
      const res = await fetch(`/api/auth/get-assistance-requests?id=${id}`, {
        cache: "no-store",
      });

      if (!res.ok) throw new Error("Failed to fetch data");

      const data = await res.json();
      console.log("Fetched Data:", data);

      if (data.length === 0) {
        setError("No requests available.");
        return;
      }

      setRequests(data);
      setError(null);
    } catch (err) {
      console.error("Error fetching request:", err);
      setError("Failed to fetch aid request.");
      if (!id) {
        router.push("/patient/profile");
      }
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    // Initial fetch when component mounts
    fetchData();
    
    // Set up auto-refresh every 30 seconds
    const interval = setInterval(() => {
      fetchData();
    }, 30000);
    
    return () => clearInterval(interval);
  }, [id, router]);

  // Helper function to format currency
  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-PK', {
      style: 'currency',
      currency: 'PKR',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount);
  };

  return (
    <>
      {/* Header Component */}
      <Header />
      <div className="w-full min-h-screen relative">
        {/* Background Image */}
        <div className="absolute inset-0 z-0">
          <Image 
            src="/images/NGO-pharma.jpg" 
            alt="NGO Pharma Background" 
            fill 
            style={{ objectFit: 'cover', opacity: 0.5 }}
            priority
          />
        </div>
        
        <div className="relative z-10 p-8 max-w-4xl mx-auto mt-16">
          <div className="mb-6">
            <h2 className="text-3xl font-bold text-black leading-tight text-center">
              NGO Assistance Request Status
            </h2>
          </div>

          {loading && !Requests ? (
            <p className="text-center text-gray-600 bg-white bg-opacity-80 p-4 rounded-lg">
              ‚è≥ Loading aid request details...
            </p>
          ) : error ? (
            <p className="text-center text-red-600 font-bold bg-white bg-opacity-80 p-4 rounded-lg">{error}</p>
          ) : (
            <div className="flex flex-col gap-3">
              {Requests.map((request) => (
                <div 
                  key={request.id} 
                  className="bg-white shadow-lg rounded-lg p-6 border border-gray-300 hover:shadow-2xl transition-all"
                >
                  <h3 className="text-xl font-semibold text-gray-900">
                    {request.fullName}
                  </h3>
                  {/* Status Label */}
                  <p className="text-gray-700 mt-2">
                    <span className="font-medium">Status:</span>
                    <span
                      className={`px-3 py-1 ml-2 font-bold rounded-full 
                        ${
                          request.Status?.toLowerCase() === "accepted" || request.Status?.toLowerCase() === "completed"
                            ? "bg-green-500 text-white"
                            : request.Status?.toLowerCase() === "declined"
                            ? "bg-red-500 text-white"
                            : request.Status?.toLowerCase() === "pending"
                            ? "bg-orange-500 text-white"
                            : request.Status?.toLowerCase() === "under review" &&
                              "bg-blue-500 text-white"
                        }`}
                    >
                      {request.Status?.charAt(0).toUpperCase() +
                        request.Status?.slice(1)}
                    </span>
                  </p>
                  {/* Status Progress Bar */}
                  <div className="w-full bg-gray-200 rounded-full h-4 mt-4">
                    <div
                      className={`h-4 rounded-full transition-all ${
                        request.Status?.toLowerCase() === "accepted" || request.Status?.toLowerCase() === "completed"
                          ? "bg-green-500 w-full"
                          : request.Status?.toLowerCase() === "pending"
                          ? "bg-yellow-500 w-2/3"
                          : "bg-red-500 w-1/3"
                      }`}
                    ></div>
                  </div>
                  {/* NGO Response Section */}
                  <div className="mt-4">
                    {(request.Status?.toLowerCase() === "accepted" || request.Status?.toLowerCase() === "completed") ? (
                      <>
                        <p className="text-gray-800 font-semibold">
                          üè• Response from NGO: <span className="text-green-600">{request.preferredNgo}</span>
                        </p>
                        <div className="mt-3 bg-green-50 p-4 rounded-lg">
                          <p className="text-gray-700">
                            <span className="font-semibold">Total Expenditure:</span> {formatCurrency(request.totalExpenditure || 0)}
                          </p>
                          <p className="text-gray-700">
                            <span className="font-semibold">Self Finance:</span> {formatCurrency(request.selfFinance || 0)}
                          </p>
                          <p className="text-gray-700">
                            <span className="font-semibold">NGO Amount:</span> {formatCurrency(request.ngoAmount || 0)}
                          </p>
                          <div className="mt-3 pt-3 border-t border-green-200">
                            <p className="text-gray-700 font-semibold text-green-600">
                              <span className="font-semibold text-gray-700">Amount Covered by NGO:</span> {formatCurrency(request.ngoAmount || 0)}
                            </p>
                            <p className="text-gray-700 mt-2 font-bold text-lg text-green-700">
                              <span className="font-semibold text-gray-700">Remaining Amount to Pay:</span> {formatCurrency(calculateRemainingAmount(request))}
                            </p>
                          </div>
                        </div>
                      </>
                    ) : (
                      <p className="mt-4 text-gray-800 font-semibold">
                        üè• Response from NGO:{" "}
                        <span className="text-gray-600">
                          Not assigned yet
                        </span>
                      </p>
                    )}
                  </div>
                  {/* Response Messages */}
                  {(request.Status?.toLowerCase() === "accepted" || request.Status?.toLowerCase() === "completed") && request.Reason && (
                    <p className="mt-3 text-gray-700 italic">
                      ‚úÖ {request.Reason}
                    </p>
                  )}
                  {request.Status?.toLowerCase() === "declined" && (
                    <div className="mt-3 p-4 bg-red-100 border-l-4 border-red-500 rounded-lg">
                      <p className="text-red-700 font-bold">
                        üö´ Request Declined
                      </p>
                      <p className="text-gray-700 mt-1">
                        <strong>Reason:</strong>{" "}
                        {request.Reason || "No reason provided"}
                      </p>
                    </div>
                  )}
                  {request.Status?.toLowerCase() === "pending" && (
                    <p className="mt-3 text-gray-600">
                      ‚è≥ Awaiting response from{" "}
                      <strong>{request.preferredNgo}</strong>...
                    </p>
                  )}
                  {/* Action Buttons */}
                  <div className="flex flex-row justify-center gap-4 mt-4">
                    {request.Status?.toLowerCase() === "declined" && (
                      <Link
                        className="bg-yellow-500 px-4 py-2 text-white rounded-md hover:bg-yellow-600 transition"
                        href="/patient/requestassistance"
                      >
                        Re-Apply
                      </Link>
                    )}
                    {(request.Status?.toLowerCase() === "accepted" || request.Status?.toLowerCase() === "completed") && (
                      <Link
                        className="bg-blue-500 px-4 py-2 text-white rounded-md hover:bg-blue-600 transition"
                        href="/appointment/book"
                      >
                        Book an Appointment
                      </Link>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </>
  );
};

export default NgoPharmaResponses;
